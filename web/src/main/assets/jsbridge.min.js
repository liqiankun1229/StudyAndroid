! function() {
	"use strict";
	/*! *****************************************************************************
    	    Copyright (c) Microsoft Corporation.

    	    Permission to use, copy, modify, and/or distribute this software for any
    	    purpose with or without fee is hereby granted.

    	    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    	    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    	    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    	    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    	    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    	    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    	    PERFORMANCE OF THIS SOFTWARE.
    	    ***************************************************************************** */
	var e = function(t, n) {
		return (e = Object.setPrototypeOf || {
				__proto__: []
			}
			instanceof Array && function(e, t) {
				e.__proto__ = t
			} || function(e, t) {
				for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n])
			})(t, n)
	};
	var t = function() {
			function e() {
				this._callbackId = 1e3, this._callbacks = {}, this._events = {},
				 this._callbackId = 1e3, this._events = {}, this._callbacks = {}
			}
			return e.prototype.addCallback = function(e) {
				return "function" != typeof e ? (console.error("[EventEmitter] Illegal callback functions\n"), "") :
					(console.log(this._callbackId), this._callbackId++,
					 this._callbacks[String(this._callbackId)] = e, String(this._callbackId))
			}, e.prototype.triggerCallback = function(e) {
				for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
				if (e && "string" == typeof e) return this._callbacks[e] && this._callbacks[e].apply(this, t) || {};
				console.error("[EventEmitter] Illegal type parameter\n")
			}, e.prototype.removeCallback = function(e) {
				e && "string" == typeof e ? this._callbacks[e] && delete this._callbacks[e] : console.error(
					"[EventEmitter] Illegal type parameter\n")
			}, e.prototype.removeAllCallbacks = function() {
				this._callbacks = {}
			}, e.prototype.addListener = function(t, n) {
				if (t && "string" == typeof t) {
					if ("function" == typeof n) {
						if (this._events[t]) {
							if (this._events[t].length >= e.MAX_LISTENERS) return void console.error(
								"[EventEmitter] The same listener is allowed to listen to up to ten objects, otherwise it may cause memory leaks\n"
							);
							this._events[t].push(n)
						} else this._events[t] = [n];
						return console.log(this._events[t]), this._events[t]
					}
					console.error("[EventEmitter] Illegal callback functions\n")
				} else console.error("[EventEmitter] Illegal type parameter\n")
			}, e.prototype.emitListener = function(e) {
				for (var t = this, n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
				if (e && "string" == typeof e) return this._events[e] ? this._events[e].map((function(e) {
					return e.apply(t, n) || {}
				})) : [];
				console.error("[EventEmitter] Illegal type parameter\n")
			}, e.prototype.removeListener = function(e) {
				e && "string" == typeof e ? this._events[e] && delete this._events[e] : console.error(
					"[EventEmitter] Illegal type parameter\n")
			}, e.prototype.removeAllListeners = function() {
				this._events = {}
			}, e.MAX_LISTENERS = 10, e
		}(),
		n = function() {
			function e(t) {
				void 0 === t && (t = "0"), this._debugLevel = 0, this._debugLevel = parseInt(t, 10) || e._defaultLevel
			}
			return e.prototype.log = function(e) {
				for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
				e >= this._debugLevel && window.console && window.console.log.apply(console, t)
			}, e._defaultLevel = 0, e
		}(),
		r = function() {
			return !!/iPhone|iPad|iPod/i.test(window.navigator.userAgent)
		},
		o = o || function(e, t) {
			var n = {},
				r = n.lib = {},
				o = function() {},
				i = r.Base = {
					extend: function(e) {
						o.prototype = this;
						var t = new o;
						return e && t.mixIn(e), t.hasOwnProperty("init") || (t.init = function() {
							t.$super.init.apply(this, arguments)
						}), t.init.prototype = t, t.$super = this, t
					},
					create: function() {
						var e = this.extend();
						return e.init.apply(e, arguments), e
					},
					init: function() {},
					mixIn: function(e) {
						for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
						e.hasOwnProperty("toString") && (this.toString = e.toString)
					},
					clone: function() {
						return this.init.prototype.extend(this)
					}
				},
				s = r.WordArray = i.extend({
					init: function(e, t) {
						e = this.words = e || [], this.sigBytes = null != t ? t : 4 * e.length
					},
					toString: function(e) {
						return (e || c).stringify(this)
					},
					concat: function(e) {
						var t = this.words,
							n = e.words,
							r = this.sigBytes;
						if (e = e.sigBytes, this.clamp(), r % 4)
							for (var o = 0; o < e; o++) t[r + o >>> 2] |= (n[o >>> 2] >>> 24 - o % 4 * 8 &
								255) << 24 - (r + o) % 4 * 8;
						else if (65535 < n.length)
							for (o = 0; o < e; o += 4) t[r + o >>> 2] = n[o >>> 2];
						else t.push.apply(t, n);
						return this.sigBytes += e, this
					},
					clamp: function() {
						var t = this.words,
							n = this.sigBytes;
						t[n >>> 2] &= 4294967295 << 32 - n % 4 * 8, t.length = e.ceil(n / 4)
					},
					clone: function() {
						var e = i.clone.call(this);
						return e.words = this.words.slice(0), e
					},
					random: function(t) {
						for (var n = [], r = 0; r < t; r += 4) n.push(4294967296 * e.random() | 0);
						return new s.init(n, t)
					}
				}),
				a = n.enc = {},
				c = a.Hex = {
					stringify: function(e) {
						var t = e.words;
						e = e.sigBytes;
						for (var n = [], r = 0; r < e; r++) {
							var o = t[r >>> 2] >>> 24 - r % 4 * 8 & 255;
							n.push((o >>> 4).toString(16)), n.push((15 & o).toString(16))
						}
						return n.join("")
					},
					parse: function(e) {
						for (var t = e.length, n = [], r = 0; r < t; r += 2) n[r >>> 3] |= parseInt(e.substr(r, 2),
							16) << 24 - r % 8 * 4;
						return new s.init(n, t / 2)
					}
				},
				l = a.Latin1 = {
					stringify: function(e) {
						var t = e.words;
						e = e.sigBytes;
						for (var n = [], r = 0; r < e; r++) n.push(String.fromCharCode(t[r >>> 2] >>> 24 - r % 4 *
							8 & 255));
						return n.join("")
					},
					parse: function(e) {
						for (var t = e.length, n = [], r = 0; r < t; r++) n[r >>> 2] |= (255 & e.charCodeAt(r)) <<
							24 - r % 4 * 8;
						return new s.init(n, t)
					}
				},
				f = a.Utf8 = {
					stringify: function(e) {
						try {
							return decodeURIComponent(escape(l.stringify(e)))
						} catch (e) {
							throw Error("Malformed UTF-8 data")
						}
					},
					parse: function(e) {
						return l.parse(unescape(encodeURIComponent(e)))
					}
				},
				g = r.BufferedBlockAlgorithm = i.extend({
					reset: function() {
						this._data = new s.init, this._nDataBytes = 0
					},
					_append: function(e) {
						"string" == typeof e && (e = f.parse(e)), this._data.concat(e), this._nDataBytes += e
							.sigBytes
					},
					_process: function(t) {
						var n = this._data,
							r = n.words,
							o = n.sigBytes,
							i = this.blockSize,
							a = o / (4 * i),
							c = t ? e.ceil(a) : e.max((0 | a) - this._minBufferSize, 0);
						if (o = e.min(4 * (t = c * i), o), t) {
							for (var l = 0; l < t; l += i) this._doProcessBlock(r, l);
							l = r.splice(0, t), n.sigBytes -= o
						}
						return new s.init(l, o)
					},
					clone: function() {
						var e = i.clone.call(this);
						return e._data = this._data.clone(), e
					},
					_minBufferSize: 0
				});
			r.Hasher = g.extend({
				cfg: i.extend(),
				init: function(e) {
					this.cfg = this.cfg.extend(e), this.reset()
				},
				reset: function() {
					g.reset.call(this), this._doReset()
				},
				update: function(e) {
					return this._append(e), this._process(), this
				},
				finalize: function(e) {
					return e && this._append(e), this._doFinalize()
				},
				blockSize: 16,
				_createHelper: function(e) {
					return function(t, n) {
						return new e.init(n).finalize(t)
					}
				},
				_createHmacHelper: function(e) {
					return function(t, n) {
						return new u.HMAC.init(e, n).finalize(t)
					}
				}
			});
			var u = n.algo = {};
			return n
		}(Math),
		i = o,
		s = i.lib,
		a = s.WordArray,
		c = s.Hasher,
		l = [],
		f = i.algo.SHA1 = c.extend({
			_doReset: function() {
				this._hash = new a.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520])
			},
			_doProcessBlock: function(e, t) {
				for (var n = this._hash.words, r = n[0], o = n[1], i = n[2], s = n[3], a = n[4], c = 0; 80 >
					c; c++) {
					if (16 > c) l[c] = 0 | e[t + c];
					else {
						var f = l[c - 3] ^ l[c - 8] ^ l[c - 14] ^ l[c - 16];
						l[c] = f << 1 | f >>> 31
					}
					f = (r << 5 | r >>> 27) + a + l[c], f = 20 > c ? f + (1518500249 + (o & i | ~o & s)) : 40 >
						c ? f + (1859775393 + (o ^ i ^ s)) : 60 > c ? f + ((o & i | o & s | i & s) -
							1894007588) : f + ((o ^ i ^ s) - 899497514), a = s, s = i, i = o << 30 | o >>> 2,
						o = r,
						r = f
				}
				n[0] = n[0] + r | 0, n[1] = n[1] + o | 0, n[2] = n[2] + i | 0, n[3] = n[3] + s | 0, n[4] = n[
					4] + a | 0
			},
			_doFinalize: function() {
				var e = this._data,
					t = e.words,
					n = 8 * this._nDataBytes,
					r = 8 * e.sigBytes;
				return t[r >>> 5] |= 128 << 24 - r % 32, t[14 + (r + 64 >>> 9 << 4)] = Math.floor(n /
						4294967296), t[15 + (r + 64 >>> 9 << 4)] = n, e.sigBytes = 4 * t.length, this
					._process(), this._hash
			},
			clone: function() {
				var e = c.clone.call(this);
				return e._hash = this._hash.clone(), e
			}
		});
	i.SHA1 = c._createHelper(f), i.HmacSHA1 = c._createHmacHelper(f);
	var g, u, d, h = i.SHA1,
		p = function(t) {
			function o(e) {
				var i = e.dgtVerifyRandomStr,
					s = void 0 === i ? "" : i,
					a = e.debugLevel,
					c = void 0 === a ? "" : a,
					l = t.call(this) || this;
				if (l._dgtVerifyRandomStr = "", l._dgtVerifyRandomStr = s, o.loggerInstance = new n(c), r()) {
					if (window.webkit && window.webkit.messageHandlers && (l.__core = window.webkit.messageHandlers),
					 o.loggerInstance && o.loggerInstance.log(2, l.__core), !l.__core)
						 return console.error("inject err"), l;
					delete window.webkit.messageHandlers
				} else {
					if (l.__core = window.__core, o.loggerInstance && o.loggerInstance.log(2, l.__core), !l.__core)
						return console.error("inject err"), l;
					delete window.__core
				}
				return l
			}
			return function(t, n) {
					function r() {
						this.constructor = t
					}
					e(t, n), t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r)
				}(o, t), o.getInstance = function(e) {
					var t = e.dgtVerifyRandomStr,
						n = e.debugLevel;
					return this.singleInstance || (this.singleInstance = new o({
						dgtVerifyRandomStr: void 0 === t ? "" : t,
						debugLevel: void 0 === n ? "" : n
					})), this.singleInstance
				}, o.prototype._doSendMessage = function(e) {
					r() ? this.__core._sendMessage.postMessage(e) : this.__core._sendMessage(e)
				}, o.prototype._sendMessage = function(e) {
					var t, n = JSON.stringify(e),
						r = [n, this._dgtVerifyRandomStr].join(""),
						i = h(r).toString(),
						s = ((t = {})[o._JSON_MESSAGE] = n, t[o._SHA_KEY] = i, t);
					this._doSendMessage(JSON.stringify(s))
				}, o.prototype.handleMessage = function(e) {
					var n = JSON.parse(e),
						r = n[o._SHA_KEY],
						i = JSON.parse(decodeURIComponent(window.atob(n[o._JSON_MESSAGE]))),
						s = [n[o._JSON_MESSAGE], this._dgtVerifyRandomStr].join("");

					if (h(s).toString() !== r) return "{}";
					switch (i[o._MESSAGE_TYPE]) {
						case "callback":
							if ("string" == typeof i[o._CALLBACK_ID]) {
								var a = t.prototype.triggerCallback.call(this, i[o._CALLBACK_ID], i.params);
								return t.prototype.removeCallback.call(this, i[o._CALLBACK_ID]), o.loggerInstance && o
									.loggerInstance.log(2, a), a.errCode = "errCode" in a ? a.errCode : 0, JSON.stringify(a)
							}
							return JSON.stringify({
								errCode: "404"
							});
						case "event":
							if ("string" == typeof i[o._EVENT_NAME]) {
								var c = t.prototype.emitListener.call(this, i[o._EVENT_NAME], i.params);
								o.loggerInstance && o.loggerInstance.log(2, c);
								var l = c.map((function(e) {
									return e.errCode = "errCode" in e ? e.errCode : 0, e
								}));
								return JSON.stringify(l)
							}
							return JSON.stringify({
								errCode: "404"
							})
					}
					return JSON.stringify({
						errCode: "404"
					})
				}, o.prototype.call = function(e, n, r) {
					var i;
					if (e && "string" == typeof e) {
						"object" != typeof n && (n = {});
						var s = "";
						"function" == typeof r && (s = t.prototype.addCallback.call(this, r));
						var a = ((i = {
							apiName: e,
							params: n
						})[o._MESSAGE_TYPE] = "call", i[o._CALLBACK_ID] = s, i);
						o.loggerInstance && o.loggerInstance.log(2, a);
						try {
							this._sendMessage(a)
						} catch (e) {
							console.error(e)
						}
					}
				}, o.prototype.on = function(e, n) {
					e && "string" == typeof e ? "function" == typeof n ? (o.loggerInstance && o.loggerInstance.log(2, e,
						n), t.prototype.addListener.call(this, e, n)) : console.error(
						"callback must be a function") : console.error("illegal event name parameter")
				}, o.singleInstance = null, o.loggerInstance = null, o._MESSAGE_TYPE = "msgType", o._CALLBACK_ID =
				"callbackId", o._EVENT_NAME = "eventName", o._JSON_MESSAGE = "jsonMessage", o._SHA_KEY = "shaKey", o
		}(t),
		_ = Date.now(),
		y = p.getInstance({
			dgtVerifyRandomStr: void 0 === (u = (g = {
				dgtVerifyRandomStr: "${_dgtVerifyRandomStr}",
				debugLevel: "${_debugLevel}"
			}).dgtVerifyRandomStr) ? "" : u,
			debugLevel: void 0 === (d = g.debugLevel) ? "" : d
		}),
		v = {
			call: y.call.bind(y),
			on: y.on.bind(y)
		};
	try {
		Object.defineProperty(v, "handleMessage", {
			value: y.handleMessage.bind(y),
			writable: !1,
			configurable: !1
		})
	} catch (e) {
		console.error("handler inject err:" + e.message)
	}
	try {
		Object.defineProperty(window, "JSBridge", {
			value: v,
			writable: !1,
			configurable: !1
		})
	} catch (e) {
		console.error("jsbridge inject err:" + e.message)
	}
	console.log("inject exec time", Date.now() - _), console.info("inject success")
}();
